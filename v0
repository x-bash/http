# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# @src std/dict  # @src std/oo # std/dict -> std/list -> std/oo
xrc dict/v0

http(){
    local op
    if [ $# -eq 0 ]; then
        op=help
    else
        op="${1}"
        shift
    fi
    case "$op" in
        make)               http_make       "$@" ;;
        browse)             http_browse     "$@" ;;
        dict|property)      http_dict       "$@" ;;
        cd)                 http_cd         "$@" ;;
        path)               http_path       "$@" ;;
        qs)                 http_qs         "$@" ;;
        header)             http_header     "$@" ;;

        req|request)        http_request    "$@" ;;
        head)               http_head       "$@" ;;
        get)                http_get        "$@" ;;
        post)               http_post       "$@" ;;
        put)                http_put        "$@" ;;
        delete)             http_delete     "$@" ;;

        resp|response)      http_resp       "$@" ;;
    esac
}


############################
# Section 1: Instantiation & Utilities
# Section 2: Dict & Path
# Section 3: Header
# Section 4: QueryString & Body
# Section 5: Request & Response
# Section 6: CRUD -- post get put delete
############################

############################
# Section 1: Instantiation & Utilities
############################
# http_new(){  oo.create_new_function http "$@";  }

http_make(){
    dict_make "${1:?Provide name}"
    local O="$1"
    dict_put url "${2:?Provide url}"
}

xrc log init http

http_browse(){
    local BROWSER=${BROWSER:-$BROWSER}
    local website=${1:?Provide websites}
    if [ -n "$BROWSER" ]; then
        $BROWSER "$website"
    elif uname -a | grep -q Darwin; then
        open -a "/Applications/Safari.app" "$website"
    elif command -v xdg-open > /dev/null; then
        xdg-open "$website"
    elif command -v gnome-open > /dev/null; then
        gnome-open "$website"
    else
        http_log debug "Could not detect the web browser to use."
        return 1
    fi
}

############################
# Section 2: Dict & Path
############################
http_dict(){
    local O="${O:?Provide Object name}"
    case $# in
        1) dict_get "${1:?Provide dict key}" ;;
        2) dict_put "${1:?Provide dict key}" "${2:?Provide dict value}" ;;
        *) echo "More than 2 variable provided" >&1; return 2;
    esac
}

http_cd(){
    [ -z "$O" ] && return 1
    local URL=${URL:-$(http_dict "url")}
    dict_put "url" "$URL/${1:?Provide url}"
}

http_path(){   # TODO: how to cd back
    local url
    url="$(http_dict url)"
    if [ -z "$url" ]; then
        echo "$1"
    else
        echo "$url$1" # TODO: it is ugly... Isn't it?
    fi
}

############################
# Section 3: Header
############################

: <<'DOCTEST'
> http_make git https://api.git.com
> O=git http_qs token token123
> O=git http_header content-type application/json
> O=git http_header accept application/json
> O=git http_header
content-type: application/json
accept: application/json
DOCTEST
http_header(){
    local O="${O:?Provide Object name}"
    local op
    if [ "$#" -eq 0 ]; then
        op=dump
    else
        op="$1"
        shift
    fi
    case "$op" in
        dump)   
            case "$1" in
                json)  
                    dict_scope header | dict_pjson ;;
                curl)
                    http_header dump | while read -r line; do
                        printf "-H \"%s\" " "$line"
                    done ;;
                *)  dict_scope header | ITEM_SEP="\n" KV_SEP=": " dict_pprint ;;
            esac ;;
        get)    
            dict_get "header" "${1:?header key}" ;;
        put)    
            dict_put "header" "${1:?header key}" "${2:?value}" ;;
        mput)   
            for i in "$@"; do
                if [[ "$i" = *=* ]]; then
                    http_header put "${i%=*}" "${i##*=}"
                else
                    http_header put "$i"
                fi
            done ;;
        remove) 
            for i in "$@"; do
                dict_drop header "$i"
            done ;;
        content-type)
            # TODO: Using another individual mapping
            _http_header_content_type "$@" ;;
        referer)    
            http_header put "Referer" "${1:?Referer}" ;;
        agent|user-agent)
            http_header put "User-Agent" "${1:?User agent}"

    esac
}

# http_header(){
#     echo "$(http_header_dump)
# $HEADER
# "
# }


# TODO: Introducing file with multiple candidates
HTTP_HEADER_CONTENT_TYPE_LSIT="
application/json
application/text
application/xml
application/yml
application/json;charset=utf-8
"

_http_header_content_type(){
    if [ $# -eq 0 ]; then
        if http_header_get "Content-Type"; then
            return 0
        else
            printf "Candiates are as below: \n%s" "$HTTP_HEADER_CONTENT_TYPE_LSIT"
            return 1
        fi
    fi

    # TODO: Introducing file with multiple candidates
    local i
    local IFS="
"
    local target="${1:?Content-Type candidates like application/json}"

    for i in $HTTP_HEADER_CONTENT_TYPE_LSIT; do
        if str_regex "$i" "$target"; then
            http_log debug "Add header: Content-Type=$i"
            http_header put "Content-Type" "$i"
            return 0
        fi
    done
    http_log debug "Add header: Content-Type=$target"
    http_header put "Content-Type" "$target"
}

# alias http.header.content-type.eq.json+utf8='_http_header_content_type_eq "application/json;charset=utf-8";'

############################
# Section 4: QueryString & Body
############################
# Notice: http_qs_put will put the empty value

: <<'DOCTEST'
> http_make git https://api.git.com
> O=git http_qs token token123
> O=git http_header put content-type application/json
> O=git http_header put accept application/json
> O=git http_qs dump json
{
  "token": "token123"
}
DOCTEST
http_qs(){
    local O="${O:?Provide Object name}"

    local op
    if [ $# -eq 0 ]; then
        op=help
    else
        op="${1}"
        shift
    fi
    
    case "$op" in
        dump)
            case "$1" in
                json)  
                    dict_scope qs | dict_pjson ;;
                curl)
                    local line
                    printf "%s" " -G "
                    dict_scope qs | KV_SEP="=" dict_pprint | while read -r line; do
                        # printf "--data-urlencode \"%s\" " "$line"
                        printf " %s " "--data-urlencode $line"
                    done ;;
                *)  dict_scope qs ;;
            esac ;;
        get)
            dict_get qs "${1:?header key}" ;;
        put)    
            dict_put qs "${1:?header key}" "${2:-${!1}}" ;;
        remove|rm)
            dict_drop qs "${1:?header key}" ;;
        mput)
            # Notice 1: `http_qs_put abc=``  will put the entry { abc: "" }
            # Notice 2: `abc=; http_qs_put abc` will NOT put any entry
            local value
            local i
            for i in "$@"; do
                if [[ "$i" = *=* ]]; then
                    http_qs_put "${i%=*}" "${i##*=}"
                else
                    eval value="\"\$${i}\""
                    [ -n "$value" ] && http_qs_put "$i" "$value"
                fi
            done;
    esac
}

: <<'DOCTEST'
> http_make git https://api.git.com
> O=git http_body token token123
> O=git http_header put content-type application/json
> O=git http_header put accept application/json
> O=git http_body_dump_json
{
  "token": "token123"
}
DOCTEST

http_body(){
    local O="${O:?Provide Object name}"
    
    local op
    if [ $# -eq 0 ]; then
        op=help
    else
        op="${1}"
        shift
    fi

    case "$op" in
        dump)
            case "$1" in
                json)  
                    dict_scope body | dict_pjson ;;
                *)  dict_scope qs ;;
            esac ;;
        get)
            dict_get body "${1:?body key}" ;;
        put)    
            dict_put body "${1:?body key}" "${2:-${!1}}" ;;
        remove|rm)
            dict_drop body "${1:?body key}" ;;
        mput)
            # Notice 1: `http_qs_put abc=``  will put the entry { abc: "" }
            # Notice 2: `abc=; http_qs_put abc` will NOT put any entry
            local value
            local i
            for i in "$@"; do
                if [[ "$i" = *=* ]]; then
                    http_body put "${i%=*}" "${i##*=}"
                else
                    eval value="\"\$${i}\""
                    [ -n "$value" ] && http_body put "$i" "$value"
                fi
            done;
    esac
}


############################
# Section 5: Request & Response
############################

http_resp(){
    local O="${O:?Provide Object name}"

    local op
    if [ $# -eq 0 ]; then
        op=help
    else
        op="${1}"
        shift
    fi

    case "$1" in
        h|header)
            if [ -z "$1" ]; then
                cat "$(_http_resp_latest_header_filepath)"
            else
                local filepath
                filepath="$(_http_resp_latest_header_filepath)"
                local filter=${1:?provide filter} A
                A="$(grep "$filter:" "$filepath")"
                A="${A##$filter: }"
                echo -n "${A%"${A##*[![:space:]]}"}"
            fi ;;
        header_filepath)
            echo "${TMPDIR}x-cmd-x-bash-std-http-header.${O:?Please provide O}" ;;
        body_filepath)
            echo "${TMPDIR}x-cmd-x-bash-std-http-body.${O:?Please provide O}" ;;
        body) 
            cat "$(_http_resp_latest_body_filepath)" ;;
        *)
            http_resp body "$@"
    esac
}

# #1: path; #2 data
http_request(){
    local IFS=$' '
    local O="${O:?Please provide O}"

    local X=${X:-get)} 
    local data=${2:-"$D"}
    local path
    path="$(http_path "$1")"

    if [ -z "$data" ]; then
        data="$(http_body_dump_json "")"
    fi

    local tmp
    tmp=$(mktemp)
    echo "$data" > "$tmp"
    # TODO: Display the data if only if body is text and data is NOT a lot
    # http_log debug "body is: $data"
    # [ -n "$DEBUG" ] && echo "body is: $data" >&2

    local header_filepath data_filepath
    header_filepath="$(_http_resp_latest_header_filepath)"
    data_filepath="$(_http_resp_latest_body_filepath)"

    if [ "$X" = GET ] || [ "$X" = DELETE ] || [ "$X" = HEAD ]; then
        http_log debug curl -D "$header_filepath" -X "$X" "$(http qs dump curl)" "$(http header dump curl)" "$path"
        eval curl -D "$header_filepath"  -X "$X" "$(http qs dump curl)" "$(http header dump curl)" "$path" 1>"$data_filepath" 2>/dev/null #2>(http_log debug)
    else
        http_log debug curl -D "$header_filepath" -X "$X" "$(http header dump curl)" -d "@$tmp" "$path"
        eval curl -D "$header_filepath" -X "$X" "$(http header dump curl)" -d "@$tmp" "$path" 1>"$data_filepath" 2>/dev/null #2>(http_log debug)
    fi
    rm "$tmp"

    http_log debug "Response Header is: $(cat "$header_filepath")"

    local a b c
    # shellcheck disable=SC2034
    read -r a b c <<<"$(cat "$header_filepath")"
    
    if [ -n "$b" ] && [ "$b" -ge 200 ] && [ "$b" -le 299 ]; then
        cat "$data_filepath"
        return 0
    fi

    printf "HttpCode is %s, Code is 1\n" "$b" >&2
    return 1
}

_http_request_json_body() (  # Notice: Using subshell
    url=$1;  shift
    http_body_mput "$@"
    http_request "$url" "$(http_body_dump_json "")"
)

############################
# Section 6: CRUD -- post get put delete
############################

# crud
http_get() (    # Notice: Using subshell
    local O="${O:?Provide Object name}"
    url=$1;  shift
    http_qs_mput "$@"
    X=GET http_request "$url"
)

http_post() {
    local O="${O:?Provide Object name}"
    case "$1" in
        json)   X=POST _http_request_json_body "$@" ;;
        form)   ;;
        text)   ;;
        bin)    ;;
        *)      X=POST http_request "$@" ;;
    esac
}

http_put(){
    local O="${O:?Provide Object name}"
    case "$1" in
        json)   X=PUT _http_request_json_body "$@" ;;
        form)   ;;
        text)   ;;
        bin)    ;;
        *)      X=PUT http_request "$@" ;;
    esac
}

http_delete(){ X=DELETE http_request "$@"; }
http_head(){ X=HEAD http_request "$@"; }
